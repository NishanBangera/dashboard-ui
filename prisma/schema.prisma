// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  dashboards Dashboard[]
}

model Dashboard {
  id          String            @id @default(uuid())
  name        String
  description String?
  isDefault   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  layouts     Layout[]
  widgets     DashboardWidget[]
}

model Layout {
  id          String    @id @default(uuid())
  name        String    @default("Default")
  config      Json      @db.Json // Stores the grid layout configuration
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dashboardId String
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
}

model WidgetType {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  icon        String?
  config      Json              @db.Json // Default configuration
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  widgets     DashboardWidget[]
}

model DashboardWidget {
  id           String     @id @default(uuid())
  title        String
  config       Json       @db.Json // Widget-specific configuration
  position     Json       @db.Json // Position in grid layout
  data         Json       @db.Json // data showed in widget
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dashboardId  String
  dashboard    Dashboard  @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  widgetTypeId String
  widgetType   WidgetType @relation(fields: [widgetTypeId], references: [id])
}
